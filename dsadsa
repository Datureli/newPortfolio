import colors from 'vuetify/es5/util/colors'

export default {
  publicRuntimeConfig: {
    API: process.env.API
  },
  privateRuntimeConfig: {
    API: process.env.API
  },

  srcDir: __dirname,
  buildDir: '.nuxt',
  /*
   ** Headers of the page
   */
  head: {
    titleTemplate: '%s | Perguidex',
    title: 'Perguidex' || '',
    meta: [
      { charset: 'utf-8' },
      { name: 'viewport', content: 'width=device-width, initial-scale=1' },
      {
        hid: 'description',
        name: 'description',
        content: 'Manage Tasks and Get things done with ease'
      }
    ],
    link: [
      { rel: 'icon', type: 'image/x-icon', href: '/favicon.ico' },
      {
        rel: 'stylesheet',
        href:
          'https://fonts.googleapis.com/css2?family=Open+Sans&family=Quicksand:wght@300;400;500;600;700&display=swap'
      }
    ],
    script: [
      {
        src: 'https://cdn.splitbee.io/sb.js',
        async: true
      }
    ]
  },
  /*
   ** Customize the progress-bar color
   */
  loading: { color: '#fff' },
  /*
   ** Global CSS
   */
  css: ['assets/Global.css'],
  /*
   ** Plugins to load before mounting the App
   */
  plugins: [
    { src: './plugins/Components.js' },
    { src: '~/plugins/shortcut-keys.js', mode: 'client' }
  ],
  /*
   ** Nuxt.js dev-modules
   */
  buildModules: [
    // Doc: https://github.com/nuxt-community/eslint-module
    '@nuxtjs/eslint-module',
    '@nuxtjs/vuetify',
    '@nuxtjs/sentry'
  ],

  sentry: {
    dsn: process.env.SENTRY_DSN || '', // Enter your project's DSN here
    // Additional Module Options go here
    // https://sentry.nuxtjs.org/sentry/options
    config: {
      // Add native Sentry config here
      // https://docs.sentry.io/platforms/javascript/guides/vue/configuration/options/
    }
  },
  /*
   ** Nuxt.js modules
   */
  modules: [
    // Doc: https://axios.nuxtjs.org/usage
    '@nuxtjs/pwa',
    '@nuxtjs/apollo',
    'cookie-universal-nuxt'
  ],
  /*
   ** Axios module configuration
   ** See https://axios.nuxtjs.org/options
   */
  axios: {},
  /*
   ** vuetify module configuration
   ** https://github.com/nuxt-community/vuetify-module
   */

  // Apollo configuration
  apollo: {
    clientConfigs: {
      default: '~/plugins/apollo-config.js'
    }
  },

  vuetify: {
    customVariables: ['~/assets/variables.scss'],
    treeShake: false,
    theme: {
      dark: false,
      themes: {
        dark: {
          primary: colors.blue.darken2,
          accent: colors.grey.darken3,
          secondary: colors.amber.darken3,
          info: colors.teal.lighten1,
          warning: colors.amber.base,
          error: colors.deepOrange.accent4,
          success: colors.green.accent3
        }
      }
    }
  },
  /*
   ** Build configuration
   */
  build: {
    /*
     ** You can extend webpack config here
     */
    extend(config, ctx) {}
  },
  pageTransition: 'layout'
}
Muhammad
Muhammad Muhaddis
/* eslint-disable no-console */
/* eslint-disable dot-notation */
import { onError } from '@apollo/client/link/error'
import { InMemoryCache } from 'apollo-cache-inmemory'

export default function(context) {
  const httpEndpoint = context.$config.API

  const link = onError(({ graphQLErrors }) => {
    graphQLErrors.forEach((err) => {
      const newErrors = []

      // Logout
      if (process.client) {
        if (err['message'] === 'Unauthenticated.') {
          // Delete all Cookies
          context.app.$cookies.removeAll()
          localStorage.clear()
          context.redirect('/')
        }
      }

      const validationErrors = err['extensions']['validation']
      const validationType = err['path'][0]
      if (validationType === 'register') {
        Object.keys(validationErrors).map((el) => {
          newErrors.push(validationErrors[el][0])
        })
        err.message = newErrors
      }
    })
  })

  const cache = new InMemoryCache()
  return {
    link,
    httpEndpoint,
    tokenName: 'apollo-token',
    authenticationType: 'Bearer',
    cache
  }
}